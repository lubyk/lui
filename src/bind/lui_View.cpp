/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class View
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "lui/View.h"

using namespace lui;

/** lui::View::View(int style=Default)
 * include/lui/View.h:75
 */
static int View_View(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int style = dub::checkint(L, 1);
      View *retval__ = new View(style);
      retval__->dub_pushobject(L, retval__, "lui.View", true);
      return 1;
    } else {
      View *retval__ = new View();
      retval__->dub_pushobject(L, retval__, "lui.View", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** lui::View::~View()
 * include/lui/View.h:77
 */
static int View__View(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lui.View"));
    if (userdata->gc) {
      View *self = (View *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::setParent(View *parent=NULL)
 * include/lui/View.h:79
 */
static int View_setParent(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      View *parent = *((View **)dub::checksdata(L, 2, "lui.View"));
      self->setParent(parent);
      return 0;
    } else {
      self->setParent();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setParent: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::animateFrame(bool should_animate)
 * include/lui/View.h:83
 */
static int View_animateFrame(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    bool should_animate = dub::checkboolean(L, 2);
    self->animateFrame(should_animate);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "animateFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "animateFrame: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::setFrame(double x, double y, double w, double h)
 * include/lui/View.h:87
 */
static int View_setFrame(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    double x = dub::checknumber(L, 2);
    double y = dub::checknumber(L, 3);
    double w = dub::checknumber(L, 4);
    double h = dub::checknumber(L, 5);
    self->setFrame(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFrame: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lui::View::frame(lua_State *L)
 * include/lui/View.h:89
 */
static int View_frame(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    return self->frame(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frame: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::show()
 * include/lui/View.h:91
 */
static int View_show(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    self->show();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "show: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "show: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::hide()
 * include/lui/View.h:93
 */
static int View_hide(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    self->hide();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hide: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hide: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::setFullscreen(bool should_fullscreen)
 * include/lui/View.h:95
 */
static int View_setFullscreen(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    bool should_fullscreen = dub::checkboolean(L, 2);
    self->setFullscreen(should_fullscreen);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFullscreen: Unknown exception");
  }
  return dub::error(L);
}

/** bool lui::View::isFullscreen()
 * include/lui/View.h:97
 */
static int View_isFullscreen(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    lua_pushboolean(L, self->isFullscreen());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isFullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isFullscreen: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::View::simulateClick(double x, double y, int op=View::MouseDown, int btn=View::LeftButton, int mod=0)
 * include/lui/View.h:101
 */
static int View_simulateClick(lua_State *L) {
  try {
    View *self = *((View **)dub::checksdata(L, 1, "lui.View"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      double x = dub::checknumber(L, 2);
      double y = dub::checknumber(L, 3);
      int op = dub::checkint(L, 4);
      int btn = dub::checkint(L, 5);
      int mod = dub::checkint(L, 6);
      self->simulateClick(x, y, op, btn, mod);
      return 0;
    } else if (top__ >= 5) {
      double x = dub::checknumber(L, 2);
      double y = dub::checknumber(L, 3);
      int op = dub::checkint(L, 4);
      int btn = dub::checkint(L, 5);
      self->simulateClick(x, y, op, btn);
      return 0;
    } else if (top__ >= 4) {
      double x = dub::checknumber(L, 2);
      double y = dub::checknumber(L, 3);
      int op = dub::checkint(L, 4);
      self->simulateClick(x, y, op);
      return 0;
    } else {
      double x = dub::checknumber(L, 2);
      double y = dub::checknumber(L, 3);
      self->simulateClick(x, y);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "simulateClick: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "simulateClick: Unknown exception");
  }
  return dub::error(L);
}

/** static LuaStackSize lui::View::screenSize(lua_State *L)
 * include/lui/View.h:81
 */
static int View_screenSize(lua_State *L) {
  try {
    return View::screenSize(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "screenSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "screenSize: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int View___tostring(lua_State *L) {
  View *self = *((View **)dub::checksdata_n(L, 1, "lui.View"));
  lua_pushfstring(L, "lui.View: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg View_member_methods[] = {
  { "new"          , View_View            },
  { "__gc"         , View__View           },
  { "setParent"    , View_setParent       },
  { "animateFrame" , View_animateFrame    },
  { "setFrame"     , View_setFrame        },
  { "frame"        , View_frame           },
  { "show"         , View_show            },
  { "hide"         , View_hide            },
  { "setFullscreen", View_setFullscreen   },
  { "isFullscreen" , View_isFullscreen    },
  { "simulateClick", View_simulateClick   },
  { "screenSize"   , View_screenSize      },
  { "__tostring"   , View___tostring      },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg View_const[] = {
  { "Borderless"   , View::Borderless     },
  { "Titled"       , View::Titled         },
  { "Closable"     , View::Closable       },
  { "Miniaturizable", View::Miniaturizable },
  { "Resizable"    , View::Resizable      },
  { "TexturedBackground", View::TexturedBackground },
  { "Default"      , View::Default        },
  { "MouseDown"    , View::MouseDown      },
  { "MouseUp"      , View::MouseUp        },
  { "DoubleClick"  , View::DoubleClick    },
  { "LeftButton"   , View::LeftButton     },
  { "RightButton"  , View::RightButton    },
  { NULL, 0},
};

extern "C" int luaopen_lui_View(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lui.View");
  // <mt>
  // register class constants
  dub::register_const(L, View_const);

  // register member methods
  dub::fregister(L, View_member_methods);
  // setup meta-table
  dub::setup(L, "lui.View");
  // <mt>
  return 1;
}
