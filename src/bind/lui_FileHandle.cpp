/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class FileHandle
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "lui/FileHandle.h"

using namespace lui;

/** lui::FileHandle::FileHandle(int fd)
 * include/lui/FileHandle.h:45
 */
static int FileHandle_FileHandle(lua_State *L) {
  try {
    int fd = dub::checkint(L, 1);
    FileHandle *retval__ = new FileHandle(fd);
    retval__->dub_pushobject(L, retval__, "lui.FileHandle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual lui::FileHandle::~FileHandle()
 * include/lui/FileHandle.h:47
 */
static int FileHandle__FileHandle(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lui.FileHandle"));
    if (userdata->gc) {
      FileHandle *self = (FileHandle *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::FileHandle::setEnabled(bool enabled)
 * include/lui/FileHandle.h:49
 */
static int FileHandle_setEnabled(lua_State *L) {
  try {
    FileHandle *self = *((FileHandle **)dub::checksdata(L, 1, "lui.FileHandle"));
    bool enabled = dub::checkboolean(L, 2);
    self->setEnabled(enabled);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setEnabled: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lui::FileHandle::__tostring(lua_State *L)
 * include/lui/FileHandle.h:51
 */
static int FileHandle___tostring(lua_State *L) {
  try {
    FileHandle *self = *((FileHandle **)dub::checksdata(L, 1, "lui.FileHandle"));
    return self->__tostring(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "__tostring: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__tostring: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::FileHandle::activated()
 * include/lui/FileHandle.h:54
 */
static int FileHandle_activated(lua_State *L) {
  try {
    FileHandle *self = *((FileHandle **)dub::checksdata(L, 1, "lui.FileHandle"));
    self->activated();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "activated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activated: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== METHODS

static const struct luaL_Reg FileHandle_member_methods[] = {
  { "new"          , FileHandle_FileHandle },
  { "__gc"         , FileHandle__FileHandle },
  { "setEnabled"   , FileHandle_setEnabled },
  { "__tostring"   , FileHandle___tostring },
  { "activated"    , FileHandle_activated },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_lui_FileHandle(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lui.FileHandle");
  // <mt>

  // register member methods
  dub::fregister(L, FileHandle_member_methods);
  // setup meta-table
  dub::setup(L, "lui.FileHandle");
  // <mt>
  return 1;
}
