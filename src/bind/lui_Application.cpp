/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Application
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "lui/Application.h"

using namespace lui;

/** lui::Application::Application()
 * include/lui/Application.h:49
 */
static int Application_Application(lua_State *L) {
  try {
    Application *retval__ = new Application();
    retval__->dub_pushobject(L, retval__, "lui.Application", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** lui::Application::~Application()
 * include/lui/Application.h:51
 */
static int Application__Application(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lui.Application"));
    if (userdata->gc) {
      Application *self = (Application *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::Application::bringToFront()
 * include/lui/Application.h:53
 */
static int Application_bringToFront(lua_State *L) {
  try {
    Application *self = *((Application **)dub::checksdata(L, 1, "lui.Application"));
    self->bringToFront();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bringToFront: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bringToFront: Unknown exception");
  }
  return dub::error(L);
}

/** int lui::Application::run()
 * include/lui/Application.h:57
 */
static int Application_run(lua_State *L) {
  try {
    Application *self = *((Application **)dub::checksdata(L, 1, "lui.Application"));
    lua_pushnumber(L, self->run());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "run: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "run: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Application___tostring(lua_State *L) {
  Application *self = *((Application **)dub::checksdata_n(L, 1, "lui.Application"));
  lua_pushfstring(L, "lui.Application: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Application_member_methods[] = {
  { "new"          , Application_Application },
  { "__gc"         , Application__Application },
  { "bringToFront" , Application_bringToFront },
  { "run"          , Application_run      },
  { "__tostring"   , Application___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_lui_Application(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lui.Application");
  // <mt>

  // register member methods
  dub::fregister(L, Application_member_methods);
  // setup meta-table
  dub::setup(L, "lui.Application");
  // <mt>
  return 1;
}
