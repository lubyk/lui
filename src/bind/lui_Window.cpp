/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Window
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "lui/Window.h"

using namespace lui;

/** lui::Window::Window(int window_flags=Default)
 * include/lui/Window.h:56
 */
static int Window_Window(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int window_flags = dub::checkint(L, 1);
      Window *retval__ = new Window(window_flags);
      retval__->dub_pushobject(L, retval__, "lui.Window", true);
      return 1;
    } else {
      Window *retval__ = new Window();
      retval__->dub_pushobject(L, retval__, "lui.Window", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** lui::Window::~Window()
 * include/lui/Window.h:58
 */
static int Window__Window(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lui.Window"));
    if (userdata->gc) {
      Window *self = (Window *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::Window::animateFrame(bool should_animate)
 * include/lui/Window.h:60
 */
static int Window_animateFrame(lua_State *L) {
  try {
    Window *self = *((Window **)dub::checksdata(L, 1, "lui.Window"));
    bool should_animate = dub::checkboolean(L, 2);
    self->animateFrame(should_animate);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "animateFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "animateFrame: Unknown exception");
  }
  return dub::error(L);
}

/** void lui::Window::setFrame(double x, double y, double w, double h)
 * include/lui/Window.h:64
 */
static int Window_setFrame(lua_State *L) {
  try {
    Window *self = *((Window **)dub::checksdata(L, 1, "lui.Window"));
    double x = dub::checknumber(L, 2);
    double y = dub::checknumber(L, 3);
    double w = dub::checknumber(L, 4);
    double h = dub::checknumber(L, 5);
    self->setFrame(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFrame: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize lui::Window::frame(lua_State *L)
 * include/lui/Window.h:66
 */
static int Window_frame(lua_State *L) {
  try {
    Window *self = *((Window **)dub::checksdata(L, 1, "lui.Window"));
    return self->frame(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frame: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Window___tostring(lua_State *L) {
  Window *self = *((Window **)dub::checksdata_n(L, 1, "lui.Window"));
  lua_pushfstring(L, "lui.Window: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Window_member_methods[] = {
  { "new"          , Window_Window        },
  { "__gc"         , Window__Window       },
  { "animateFrame" , Window_animateFrame  },
  { "setFrame"     , Window_setFrame      },
  { "frame"        , Window_frame         },
  { "__tostring"   , Window___tostring    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg Window_const[] = {
  { "Borderless"   , Window::Borderless   },
  { "Titled"       , Window::Titled       },
  { "Closable"     , Window::Closable     },
  { "Miniaturizable", Window::Miniaturizable },
  { "Resizable"    , Window::Resizable    },
  { "TexturedBackground", Window::TexturedBackground },
  { "Default"      , Window::Default      },
  { NULL, 0},
};

extern "C" int luaopen_lui_Window(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lui.Window");
  // <mt>
  // register class constants
  dub::register_const(L, Window_const);

  // register member methods
  dub::fregister(L, Window_member_methods);
  // setup meta-table
  dub::setup(L, "lui.Window");
  // <mt>
  return 1;
}
