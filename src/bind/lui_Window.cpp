/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Window
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "lui/Window.h"

using namespace lui;

/** lui::Window::Window(int window_flags=0)
 * include/lui/Window.h:42
 */
static int Window_Window(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int window_flags = dub::checkint(L, 1);
      Window *retval__ = new Window(window_flags);
      retval__->dub_pushobject(L, retval__, "lui.Window", true);
      return 1;
    } else {
      Window *retval__ = new Window();
      retval__->dub_pushobject(L, retval__, "lui.Window", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** lui::Window::~Window()
 * include/lui/Window.h:44
 */
static int Window__Window(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "lui.Window"));
    if (userdata->gc) {
      Window *self = (Window *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Window___tostring(lua_State *L) {
  Window *self = *((Window **)dub::checksdata_n(L, 1, "lui.Window"));
  lua_pushfstring(L, "lui.Window: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Window_member_methods[] = {
  { "new"          , Window_Window        },
  { "__gc"         , Window__Window       },
  { "__tostring"   , Window___tostring    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_lui_Window(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lui.Window");
  // <mt>

  // register member methods
  dub::fregister(L, Window_member_methods);
  // setup meta-table
  dub::setup(L, "lui.Window");
  // <mt>
  return 1;
}
